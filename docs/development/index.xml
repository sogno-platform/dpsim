<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DPsim – Development</title><link>https://sogno-platform.github.io/dpsim/docs/development/</link><description>Recent content in Development on DPsim</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://sogno-platform.github.io/dpsim/docs/development/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Debugging</title><link>https://sogno-platform.github.io/dpsim/docs/development/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sogno-platform.github.io/dpsim/docs/development/debugging/</guid><description>
&lt;h2 id="mixed-python-c-debugging">Mixed Python C++ Debugging&lt;/h2>
&lt;h3 id="prerequisites">Prerequisites&lt;/h3>
&lt;p>Your vscode launch.json should have two configurations, one to launch the python process and one to attach gdb:&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;version&amp;quot;: &amp;quot;0.2.0&amp;quot;,
&amp;quot;configurations&amp;quot;: [
{
&amp;quot;name&amp;quot;: &amp;quot;Python: Current File&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;python&amp;quot;,
&amp;quot;request&amp;quot;: &amp;quot;launch&amp;quot;,
&amp;quot;program&amp;quot;: &amp;quot;${file}&amp;quot;,
&amp;quot;console&amp;quot;: &amp;quot;integratedTerminal&amp;quot;,
&amp;quot;stopOnEntry&amp;quot;: true,
&amp;quot;env&amp;quot;: {&amp;quot;PYTHONPATH&amp;quot;: &amp;quot;${workspaceFolder}/build${pathSeparator}${env:PYTHONPATH}&amp;quot;}
},
{
&amp;quot;name&amp;quot;: &amp;quot;(gdb) Attach&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;cppdbg&amp;quot;,
&amp;quot;request&amp;quot;: &amp;quot;attach&amp;quot;,
&amp;quot;program&amp;quot;: &amp;quot;/usr/bin/python&amp;quot;,
&amp;quot;processId&amp;quot;: &amp;quot;${command:pickProcess}&amp;quot;,
&amp;quot;MIMode&amp;quot;: &amp;quot;gdb&amp;quot;,
&amp;quot;setupCommands&amp;quot;: [
{
&amp;quot;description&amp;quot;: &amp;quot;Enable pretty-printing for gdb&amp;quot;,
&amp;quot;text&amp;quot;: &amp;quot;-enable-pretty-printing&amp;quot;,
&amp;quot;ignoreFailures&amp;quot;: true
}
]
}
]
}
&lt;/code>&lt;/pre>
&lt;p>The python debugger will stop on entry (&amp;ldquo;stopOnEntry&amp;rdquo;: true).
Make sure to adapt your PYTHONPATH variable if necessary.&lt;/p>
&lt;p>The C++ code has to be build in debug mode&lt;/p>
&lt;pre>&lt;code>cmake .. -DCMAKE_BUILD_TYPE=Debug
&lt;/code>&lt;/pre>
&lt;h3 id="attaching-c-debugger">Attaching C++ Debugger&lt;/h3>
&lt;ul>
&lt;li>open the python example to be debugged&lt;/li>
&lt;li>go to the debug menu and select / run the &amp;ldquo;Python: Current File&amp;rdquo; configuration&lt;/li>
&lt;li>the python debugger should stop at entry&lt;/li>
&lt;li>set C++ breakpoints&lt;/li>
&lt;li>go to the debug menu and run the &amp;ldquo;(gdb) Attach&amp;rdquo; configuration&lt;/li>
&lt;li>select a process… choose the python process with the “—adapter-access-token” part&lt;/li>
&lt;li>you can view the whole description when you hover over the process with the mouse&lt;/li>
&lt;li>press play to continue Python debugging… the c++ debugger will stop at the next breakpoint&lt;/li>
&lt;/ul>
&lt;p>You can automate this by using the vscode extension “Python C++ Debugger” and by adding this configuration to the launch.json above:&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;name&amp;quot;: &amp;quot;Python C++ Debugger&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;pythoncpp&amp;quot;,
&amp;quot;request&amp;quot;: &amp;quot;launch&amp;quot;,
&amp;quot;pythonConfig&amp;quot;: &amp;quot;custom&amp;quot;,
&amp;quot;pythonLaunchName&amp;quot;: &amp;quot;Python: Current File&amp;quot;,
&amp;quot;cppConfig&amp;quot;: &amp;quot;default (gdb) Attach&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;p>This will automatically run both debuggers and select the current process.&lt;/p>
&lt;p>It can take a while before the debugger hits the C++ breakpoints.&lt;/p>
&lt;h2 id="c-debugging">C++ Debugging&lt;/h2>
&lt;p>Use the following launch.json for vscode and set the program path:&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;version&amp;quot;: &amp;quot;0.2.0&amp;quot;,
&amp;quot;configurations&amp;quot;: [
{
&amp;quot;name&amp;quot;: &amp;quot;(gdb) Launch&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;cppdbg&amp;quot;,
&amp;quot;request&amp;quot;: &amp;quot;launch&amp;quot;,
&amp;quot;program&amp;quot;: &amp;quot;${workspaceFolder}/dpsim/build/Examples/Cxx/example&amp;quot;,
&amp;quot;args&amp;quot;: [],
&amp;quot;stopAtEntry&amp;quot;: true,
&amp;quot;cwd&amp;quot;: &amp;quot;${workspaceFolder}&amp;quot;,
&amp;quot;environment&amp;quot;: [],
&amp;quot;externalConsole&amp;quot;: false,
&amp;quot;MIMode&amp;quot;: &amp;quot;gdb&amp;quot;,
&amp;quot;setupCommands&amp;quot;: [
{
&amp;quot;description&amp;quot;: &amp;quot;Enable pretty-printing for gdb&amp;quot;,
&amp;quot;text&amp;quot;: &amp;quot;-enable-pretty-printing&amp;quot;,
&amp;quot;ignoreFailures&amp;quot;: true
}
]
}
]
}
&lt;/code>&lt;/pre></description></item><item><title>Docs: Guidelines</title><link>https://sogno-platform.github.io/dpsim/docs/development/guidelines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sogno-platform.github.io/dpsim/docs/development/guidelines/</guid><description>
&lt;p>This is a summary of general guidelines for the development of DPsim.&lt;/p>
&lt;h2 id="scaling-of-voltages-and-currents">Scaling of Voltages and Currents&lt;/h2>
&lt;p>Voltage quantities are expressed either as phase-to-phase RMS values (denominated as &lt;code>RMS3PH&lt;/code>) or as phase-to-ground peak values (denominated as &lt;code>PEAK1PH&lt;/code>):&lt;/p>
&lt;ul>
&lt;li>Initialisation quantities (e.g. &lt;code>initialSingleVoltage&lt;/code> of &lt;code>SimPowerComp&lt;/code>) as &lt;code>RMS3PH&lt;/code> values&lt;/li>
&lt;li>Simulation quantities in both &lt;code>SP&lt;/code> and &lt;code>DP&lt;/code> domain (e.g. &lt;code>mIntfVoltage&lt;/code> of &lt;code>DP::Ph1::PiLine&lt;/code>) as &lt;code>RMS3PH values&lt;/code>&lt;/li>
&lt;li>Simulation quantities in the &lt;code>EMT&lt;/code> domain (e.g. &lt;code>mIntfVoltage&lt;/code> of &lt;code>EMT::Ph3::Transformer&lt;/code>) as &lt;code>PEAK1PH&lt;/code> values&lt;/li>
&lt;/ul>
&lt;p>Current quantities are expressed either as &lt;code>RMS&lt;/code> or as &lt;code>PEAK&lt;/code> values:&lt;/p>
&lt;ul>
&lt;li>Simulation quantities in both &lt;code>SP&lt;/code> and &lt;code>DP&lt;/code> domain (e.g. &lt;code>mIntfCurrent&lt;/code> of &lt;code>DP::Ph1::PiLine&lt;/code>) as &lt;code>RMS&lt;/code> values&lt;/li>
&lt;li>Simulation quantities in the &lt;code>EMT&lt;/code> domain (e.g. &lt;code>mIntfCurrent&lt;/code> of &lt;code>EMT::Ph3::Transformer&lt;/code>) as &lt;code>PEAK&lt;/code> values&lt;/li>
&lt;/ul>
&lt;h2 id="logging">Logging&lt;/h2>
&lt;p>Debug or trace should be the default log level for information that might be nice to have but not necessary for every simulation case.&lt;/p>
&lt;p>Calls to the logger that might occur during simulation must use spdlog macros, like SPDLOG_LOGGER_INFO.&lt;/p>
&lt;h2 id="creating-new-releases">Creating New Releases&lt;/h2>
&lt;p>Although DPsim currently does not have any conventions on versioning, the periodic creation of
new versions can help to mark significant changes and to analyze new portions of code using tools like SonarCloud.&lt;/p>
&lt;p>A new version of DPsim has to be indicated as follows:&lt;/p>
&lt;ul>
&lt;li>Create a new tag with an increased version number&lt;/li>
&lt;li>Update setup.cfg&lt;/li>
&lt;li>Update CMakeLists.txt&lt;/li>
&lt;li>Update sonar-project.properties&lt;/li>
&lt;/ul>
&lt;p>Due to the creation of a new tag, a new PyPi package will be deployed automatically.
To release an updated Docker image, the container workflow needs to be triggered manually.&lt;/p></description></item></channel></rss>